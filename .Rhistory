library(tidyverse)
library(fpp2)
library(zoo)
library(readr)
set.seed(506)
# Import data
gas.data <- read_csv("D:/ADS 506 Applied Time Series Analysis/Module 3/NaturalGas.csv")
# Convert the NaturalGas to a time series subject
gas <- ts(gas.data$NaturalGas, start = c(2005,12), frequency = 12)
autoplot(gas)
# The rollmean function will calculate a trailing moving average
ma.trailing <- rollmean(gas, k = 4, align = "right")
# The function ma will create a centered moving average
ma.centered <- ma(gas, order = 4)
# Reproduce the time plot
autoplot(gas, ylab = "Natural Gas", xlab = "Time", bty = "l", xaxt = "n", main = "")
axis(1, at = seq(2001, 2010, 1), labels = format(seq(2001, 2010, 1)))
# The rollmean function will calculate a trailing moving average
ma.trailing <- rollmean(gas, k = 4, align = "right")
# The function ma will create a centered moving average
ma.centered <- ma(gas, order = 4)
# Reproduce the time plot
autoplot(gas, ylab = "Natural Gas", xlab = "Time", bty = "l", xaxt = "n", main = "")
lines(ma.trailing, lwd = 2, lty = 2)
# The rollmean function will calculate a trailing moving average
ma.trailing <- rollmean(gas, k = 4, align = "right")
# The function ma will create a centered moving average
ma.centered <- ma(gas, order = 4)
# Reproduce the time plot
autoplot(gas, series = 'Actual') + autolayer(ma.trailing, series = 'MovingAvg') + theme_classic
# The rollmean function will calculate a trailing moving average
ma.trailing <- rollmean(gas, k = 4, align = "right")
# The function ma will create a centered moving average
ma.centered <- ma(gas, order = 4)
# Reproduce the time plot
autoplot(gas, series = 'Actual') + autolayer(ma.trailing, series = 'MovingAvg') + theme_classic()
# The rollmean function will calculate a trailing moving average
ma.trailing <- rollmean(gas, k = 4, align = "right")
# The function ma will create a centered moving average
ma.centered <- ma(gas, order = 4)
# Reproduce the time plot
autoplot(gas, series = 'Actual') + autolayer(ma.trailing, series = 'Trailing Moving Average') + theme_classic()
# The rollmean function will calculate a trailing moving average
ma.trailing <- rollmean(gas, k = 4, align = "right")
# The function ma will create a centered moving average
ma.centered <- ma(gas, order = 4)
# Reproduce the time plot
autoplot(gas, series = 'Actual') + autolayer(ma.trailing, series = 'Trailing Moving Average') + autolayer(ma.centered, series = 'Centered Moving Average') + theme_classic()
# The rollmean function will calculate a trailing moving average
ma.trailing <- rollmean(gas, k = 4, align = "right")
# The function ma will create a centered moving average
ma.centered <- ma(gas, order = 4)
# Reproduce the time plot
autoplot(gas, series = 'Actual') +
autolayer(ma.trailing, series = 'Trailing Moving Average') +
autolayer(ma.centered, series = 'Centered Moving Average') +
theme_classic()
# Run moving average forecaster with Trailing Moving Averag
ma.pred <- forecast(ma.trailing, h = 10)
# Reproduce the time plot
autoplot(gas, series = 'Actual') +
autolayer(ma.trailing, series = 'Trailing Moving Average') +
autolayer(ma.pred, series = 'Moving aAverage Forecaster') +
theme_classic()
# Import data
wine.data <- read_csv("D:/ADS 506 Applied Time Series Analysis/Module 3/AustralianWines.csv")
# Convert the fortified wine to a time series subject
fortified <- ts(wine.data$Fortified, start = c(1980,1), end = c(1994, 12), frequency = 12)
# To partition the data using the period until December 1993 as the training period
wine.Valid <- 12
wine.train <- length(fortified) - wine.Valid
wine.train.ts <- window(fortified, start = c(1980,1), end = c(1980, wine.train))
wine.valid.ts <- window(fortified, start = c(1980, wine.train +1), end = c(1980, wine.train + wine.Valid))
# Use the tslm function to produce a linear trend and seasonality model
wine.lm <- tslm(fortified ~ season, fortified)
wine.lm
# Use forecast function to make predictions using this wine.lm model for h = nValid steps
# ahead in the validation period.
wine.lm.pred <- forecast(wine.lm, h = wine.Valid, level = 0)
wine.lm.pred
# Use the tslm function to produce a linear trend and seasonality model
wine.lm <- tslm(fortified ~ season, fortified)
wine.lm
# Use forecast function to make predictions using this wine.lm model for h = nValid steps
# ahead in the validation period.
wine.lm.pred <- forecast(wine.lm, h = 24)
wine.lm.pred
# Reproduce the actual vs forecast plot
autoplot(wine.train.ts, series = 'Train') +
autolayer(wine.valid.ts, series = 'Actual') +
autolayer(wine.lm.pred, series = 'Prediction') +
theme_classic()
